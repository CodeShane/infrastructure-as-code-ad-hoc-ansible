---
# LICENSE:         Public Domain

#    ansible-playbook ad-hoc/test/install-mariadb.yml -i hosts
#    ansible-playbook ad-hoc/test/install-mariadb.yml -i hosts --extra-vars="mariadb_root_password=PassWord"

- name: "ansible-ad-hoc | TEST | install-mariadb.yml"
  hosts: all
  gather_facts: no

  vars_prompt:
    - name: agree
      prompt: "DID YOU REALLY WANT APPLY test/install-mariadb.yml: TO {{ ansible_play_hosts }}? (yes)"
      private: no
      default: "no"
    - name: mariadb_root_password
      prompt: "Root Password"
      private: yes
      confirm: yes
    # The variable force=yes is required if we detect service seems to already be installed on past. But we will warn
    # user only if we detect#
    #- name: force
    #  prompt: "Force if already running?"
    #  private: no
    #  default: "no"

  vars:
    # Ubuntu 18.04 try to use MariaDB 10.1. This will add a newer version (even if is just for a quick test)
    mariadb_apt_repository: 'deb [arch=amd64,arm64,ppc64el] http://nyc2.mirrors.digitalocean.com/mariadb/repo/10.4/ubuntu bionic main'
    mariadb_apt_key_keyserver: 'hkp://keyserver.ubuntu.com:80'
    mariadb_apt_key_id: '0xF1656F24C74CD1D8'
    mariadb_packages:
      - mariadb-server
      - mariadb-client
      - python-mysqldb

  pre_tasks:
    - name: "ansible-ad-hoc | TEST | install-mariadb.yml | agree?"
      fail:
        msg: "ansible-ad-hoc/test/* are experimental/for testing only. user did not agree, aborting"
      when: "agree != 'yes' and agree != 'y'"

    - name: "ansible-ad-hoc | TEST | install-mariadb.yml | gather_facts minimal"
      setup:
        gather_subset:
          - "!all"
          #- "!any"
          #- "!min"
          #- "min"

    - name: "ansible-ad-hoc | TEST | install-mariadb.yml | Debian? Ubuntu?"
      fail:
        msg: "test/install-mariadb.yml Tested only on Debian based distros [This host: {{ ansible_distribution }}]"
      when: "ansible_distribution != 'Debian' and ansible_distribution != 'Ubuntu'"

    - name: "ansible-ad-hoc | TEST | install-mariadb.yml | service mariadb status"
      shell: service mariadb status
      ignore_errors: yes
      register: mariadb_status_before

    - name: "ansible-ad-hoc | TEST | install-mariadb.yml | mariadb_status_before"
      debug:
        msg: "{{ mariadb_status_before }}"

    - name: "ansible-ad-hoc | TEST | install-mariadb.yml | MariaDB already installed & no force=yes?"
      fail:
        msg: 'MariaDB already installed on this host. Use hidden param force=yes (like --extra-vars="force=yes"). THIS MAY BREAK A WORKING HOST.'
      when: 
        - "mariadb_status_before.failed != true"
        - "force is not defined and (force != 'yes' and force != 'y')"

  tasks:
#    - name: "ansible_facts"
#      debug:
#        msg: "{{ ansible_facts }}"

#    - name: "mariadb_root_password"
#      debug:
#        msg: "{{ mariadb_root_password }}"

    - name: "ansible-ad-hoc | TEST | install-mariadb.yml | sudo apt-key adv --recv-keys --keyserver ..."
      apt_key:
        keyserver: "{{ mariadb_apt_key_keyserver }}"
        id: "{{ mariadb_apt_key_id }}"

    - name: "ansible-ad-hoc | TEST | install-mariadb.yml | sudo add-apt-repository ..."
      apt_repository:
        repo: "{{ mariadb_apt_repository }}"
        state: present
        update_cache: yes

    - name: "ansible-ad-hoc | TEST | install-mariadb.yml | sudo apt install {{ mariadb_packages }}"
      apt:
        name: "{{ mariadb_packages }}"

    - name: "ansible-ad-hoc | TEST | install-mariadb.yml | set mariadb_root_password"
      mysql_user:
        user: root
        password: "{{ mariadb_root_password }}"
        host: localhost
