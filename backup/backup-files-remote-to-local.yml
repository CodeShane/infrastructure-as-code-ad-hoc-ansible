---
# LICENSE:         Public Domain

# NOTE: backup-files-remote-to-local.yml still a bit hacky. Can be used as
#       Proof of concept or to know more about how Ansible synchronize module
#       works and then consider reusing some parts on other scripts, but the
#       backup-files-remote-to-local.yml at this version is overenginered
#       to what you could do using plain rsync
#       (fititnt, 2019-11-22 03:31 BRT)

#    ansible-playbook backup/backup-files-remote-to-local.yml -i hosts
#    ansible-playbook backup/backup-files-remote-to-local.yml -i hosts --extra-vars="agree=yes source_directory=/var/www/html/"
#    (not implemented) ansible-playbook backup/backup-files-remote-to-local.yml -i hosts --extra-vars="agree=yes source_directory=/backup/temp/ destiny_directory=/backup/temp/"

# @see https://docs.ansible.com/ansible/latest/modules/synchronize_module.html

- name: "ansible-ad-hoc | backup-files-remote-to-local.yml"
  hosts: all
  gather_facts: no

  vars_prompt:
    - name: source_directory
      prompt: "Appling backup-files-remote-to-local.yml TO {{ ansible_play_hosts }}. What source directory to sincronize?"
      private: no
      default: "/var/www/html/"
    #- name: destiny_directory
    #  prompt: "Appling backup-files-remote-to-local.yml TO {{ ansible_play_hosts }}. Continue? (default: yes)"
    #  private: no
    #  default: "/backup/{{ inventory_hostname }}{{ source_directory }}"

  pre_tasks:
    - name: "ansible-ad-hoc | backup-files-remote-to-local.yml | gather_facts minimal"
      setup:
        gather_subset:
          - "!all"

  tasks:
    - set_fact:
       destiny_directory_suggestion: "/backup/{{ inventory_hostname }}{{ source_directory }}"

    - pause:
        prompt: "ansible-ad-hoc | backup-files-remote-to-local.yml | destiny_directory on localhost? (Must already exist, or will fail) (default {{ destiny_directory_suggestion }})"
        echo: yes
      register: destiny_directory

#    - name: "ansible-ad-hoc | backup-files-remote-to-local.yml | destiny_directory is empty?"
#      fail:
#        msg: "destiny_directory empty or too short. Aborting. Response was {{ destiny_directory }}"
#      when:
#        - "destiny_directory.user_input is undefined or destiny_directory.user_input == ''"

    - set_fact:
       destiny_directory_result: "{{ destiny_directory_suggestion }}"
      when:
        - "destiny_directory.user_input is undefined or destiny_directory.user_input == ''"

    - set_fact:
       destiny_directory_result: "{{ destiny_directory.user_input }}"
      when:
        - "destiny_directory.user_input is not undefined and destiny_directory.user_input != ''"

#    - stat:
#        path: destiny_directory_result
#      delegate_to: localhost
#      register: destiny_directory_result_stat

#    - name: "destiny_directory_result_stat"
#      debug:
#        msg: "{{ destiny_directory_result_stat }}"

#    - debug:
#        msg: "destiny_directory_result_stat exists and is a directory"
#      when: destiny_directory_result_stat.stat.isdir is defined and destiny_directory_result_stat.stat.isdir

#    - debug:
#        msg: "destiny_directory_result_stat exists and is a directory"
#      when: 
#       - not (destiny_directory_result_stat.stat.isdir is defined and destiny_directory_result_stat.stat.isdir)

#    - name: "ansible-ad-hoc | backup-files-remote-to-local.yml | destiny_directory_result exists?"
#      fail:
#        msg: "Destiny directory should already exist. This script could created it, but just for safety, we will not create it now [{{ destiny_directory_result }} {{ destiny_directory_result_stat }}]"
#      when: "destiny_directory_result_stat.stat.isdir is undefined or destiny_directory_result_stat.stat.isdir is sameas false"

    - pause:
        prompt: "ansible-ad-hoc | backup-files-remote-to-local.yml | Are you sure about copy {{ inventory_hostname }}:{{ source_directory }} to localhost:{{ destiny_directory_result }}. Reply yes to continue. (default: no)"
        echo: yes
      register: agree_cli
      when:
      - "agree is undefined and agree.user_input != 'yes' and agree.user_input != 'y'"

    - name: "Debug: source_directory"
      debug:
        msg: "{{ source_directory }}"

    - name: "Debug: destiny_directory"
      debug:
        msg: "{{ destiny_directory }}"

    - name: "Debug: destiny_directory_result"
      debug:
        msg: "{{ destiny_directory_result }}"

    - name: "ansible-ad-hoc | backup-files-remote-to-local.yml | agree_cli?"
      fail:
        msg: "agree_cli != yes. Aborting. {{ agree_cli }}"
      when:
        - "agree_cli is undefined and agree_cli.user_input != 'yes' and agree_cli.user_input != 'y'"
        - "agree is undefined and agree.user_input != 'yes' and agree.user_input != 'y'"

    - name: Synchronize task bug workaround
      set_fact:
          ansible_ssh_user: "{{ ansible_ssh_user }}"

    # NOTE: maybe is required to before start sincronize the directories
    #       to create the local path first

    # Note: needs fixing. Uses local user (like fititnt@host) not Ansible user (like root@host) to pull de files
    #       so may fail. Fix this eventually (fititnt, 2019-11-22 02:32 BRT)
    - name: "ansible-ad-hoc | backup-files-remote-to-local.yml | synchronize pull {{ ansible_play_hosts }}, source_directory {{ source_directory }} to {{ destiny_directory_result }}"
      synchronize:
        mode: pull
        src: "{{ source_directory }}"
        dest: "{{ destiny_directory_result }}"
        # set_remote_user: no
      delegate_to: localhost
